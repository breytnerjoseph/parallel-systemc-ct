<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="726.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="709" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="709" > </text>
<g id="frames">
<g >
<title>sct_core::my_vector::my_vector (3,552 samples, 0.04%)</title><rect x="16.3" y="501" width="0.6" height="15.0" fill="rgb(215,120,14)" rx="2" ry="2" />
<text  x="19.33" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base::operator[] (864 samples, 0.01%)</title><rect x="12.1" y="37" width="0.1" height="15.0" fill="rgb(243,101,16)" rx="2" ry="2" />
<text  x="15.07" y="47.5" ></text>
</g>
<g >
<title>memcpy (27,216 samples, 0.34%)</title><rect x="60.7" y="469" width="4.0" height="15.0" fill="rgb(228,134,41)" rx="2" ry="2" />
<text  x="63.68" y="479.5" ></text>
</g>
<g >
<title>operator new (1,296 samples, 0.02%)</title><rect x="12.6" y="37" width="0.2" height="15.0" fill="rgb(222,52,20)" rx="2" ry="2" />
<text  x="15.57" y="47.5" ></text>
</g>
<g >
<title>std::__future_base::_State_baseV2::_M_do_set (7,992,192 samples, 99.55%)</title><rect x="15.2" y="597" width="1174.7" height="15.0" fill="rgb(220,137,18)" rx="2" ry="2" />
<text  x="18.16" y="607.5" >std::__future_base::_State_baseV2::_M_do_set</text>
</g>
<g >
<title>sct_core::operator* (11,200 samples, 0.14%)</title><rect x="24.4" y="453" width="1.6" height="15.0" fill="rgb(229,174,49)" rx="2" ry="2" />
<text  x="27.39" y="463.5" ></text>
</g>
<g >
<title>inputs_manager::operator[] (2,880 samples, 0.04%)</title><rect x="27.3" y="421" width="0.4" height="15.0" fill="rgb(219,115,46)" rx="2" ry="2" />
<text  x="30.26" y="431.5" ></text>
</g>
<g >
<title>boost::numeric::odeint::dense_output_runge_kutta::resize (2,736 samples, 0.03%)</title><rect x="29.5" y="469" width="0.4" height="15.0" fill="rgb(228,73,6)" rx="2" ry="2" />
<text  x="32.49" y="479.5" ></text>
</g>
<g >
<title>free (27,216 samples, 0.34%)</title><rect x="48.7" y="469" width="4.0" height="15.0" fill="rgb(246,161,37)" rx="2" ry="2" />
<text  x="51.68" y="479.5" ></text>
</g>
<g >
<title>sct_kernel::synchronization_layer::parallel_registering_process (19,849 samples, 0.25%)</title><rect x="10.9" y="405" width="2.9" height="15.0" fill="rgb(216,39,22)" rx="2" ry="2" />
<text  x="13.85" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base::operator[] (872,192 samples, 10.86%)</title><rect x="996.2" y="437" width="128.2" height="15.0" fill="rgb(244,119,42)" rx="2" ry="2" />
<text  x="999.24" y="447.5" >std::__detail::_..</text>
</g>
<g >
<title>std::_Function_handler::_M_invoke (7,991,600 samples, 99.54%)</title><rect x="15.2" y="581" width="1174.7" height="15.0" fill="rgb(207,193,3)" rx="2" ry="2" />
<text  x="18.25" y="591.5" >std::_Function_handler::_M_invoke</text>
</g>
<g >
<title>operator delete (327,072 samples, 4.07%)</title><rect x="1140.5" y="453" width="48.0" height="15.0" fill="rgb(242,157,50)" rx="2" ry="2" />
<text  x="1143.46" y="463.5" >oper..</text>
</g>
<g >
<title>CircuitScModule::get_derivatives (3,289,920 samples, 40.98%)</title><rect x="480.6" y="469" width="483.6" height="15.0" fill="rgb(233,72,49)" rx="2" ry="2" />
<text  x="483.63" y="479.5" >CircuitScModule::get_derivatives</text>
</g>
<g >
<title>sct_kernel::synchronization_layer::parallel_registering_process (19,821 samples, 0.25%)</title><rect x="10.9" y="277" width="2.9" height="15.0" fill="rgb(251,179,38)" rx="2" ry="2" />
<text  x="13.85" y="287.5" ></text>
</g>
<g >
<title>free (2,240 samples, 0.03%)</title><rect x="24.7" y="437" width="0.4" height="15.0" fill="rgb(244,77,40)" rx="2" ry="2" />
<text  x="27.72" y="447.5" ></text>
</g>
<g >
<title>free (1,920 samples, 0.02%)</title><rect x="21.5" y="421" width="0.2" height="15.0" fill="rgb(217,93,13)" rx="2" ry="2" />
<text  x="24.45" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base::operator[] (657,984 samples, 8.20%)</title><rect x="770.8" y="437" width="96.7" height="15.0" fill="rgb(209,183,29)" rx="2" ry="2" />
<text  x="773.77" y="447.5" >std::__deta..</text>
</g>
<g >
<title>malloc (109,664 samples, 1.37%)</title><rect x="125.0" y="485" width="16.2" height="15.0" fill="rgb(252,28,46)" rx="2" ry="2" />
<text  x="128.05" y="495.5" ></text>
</g>
<g >
<title>memcpy (219,936 samples, 2.74%)</title><rect x="319.4" y="453" width="32.3" height="15.0" fill="rgb(219,216,26)" rx="2" ry="2" />
<text  x="322.41" y="463.5" >me..</text>
</g>
<g >
<title>memcpy (1,184 samples, 0.01%)</title><rect x="16.7" y="485" width="0.2" height="15.0" fill="rgb(232,215,1)" rx="2" ry="2" />
<text  x="19.68" y="495.5" ></text>
</g>
<g >
<title>sc_core::sc_spawn_object::semantics (19,862 samples, 0.25%)</title><rect x="10.8" y="485" width="3.0" height="15.0" fill="rgb(250,113,11)" rx="2" ry="2" />
<text  x="13.85" y="495.5" ></text>
</g>
<g >
<title>memset (4,128 samples, 0.05%)</title><rect x="89.0" y="469" width="0.6" height="15.0" fill="rgb(235,4,44)" rx="2" ry="2" />
<text  x="91.99" y="479.5" ></text>
</g>
<g >
<title>sct_core::abs (960 samples, 0.01%)</title><rect x="28.2" y="469" width="0.1" height="15.0" fill="rgb(249,42,27)" rx="2" ry="2" />
<text  x="31.16" y="479.5" ></text>
</g>
<g >
<title>memset (109,024 samples, 1.36%)</title><rect x="1028.3" y="421" width="16.0" height="15.0" fill="rgb(207,61,16)" rx="2" ry="2" />
<text  x="1031.29" y="431.5" ></text>
</g>
<g >
<title>sct_core::operator+ (6,400 samples, 0.08%)</title><rect x="26.0" y="453" width="1.0" height="15.0" fill="rgb(209,83,52)" rx="2" ry="2" />
<text  x="29.04" y="463.5" ></text>
</g>
<g >
<title>free (1,760 samples, 0.02%)</title><rect x="19.1" y="453" width="0.3" height="15.0" fill="rgb(242,59,20)" rx="2" ry="2" />
<text  x="22.15" y="463.5" ></text>
</g>
<g >
<title>sct_kernel::ode_system::create_checkpoint (1,344 samples, 0.02%)</title><rect x="1189.6" y="517" width="0.2" height="15.0" fill="rgb(215,41,39)" rx="2" ry="2" />
<text  x="1192.57" y="527.5" ></text>
</g>
<g >
<title>operator delete (3,136 samples, 0.04%)</title><rect x="18.0" y="485" width="0.5" height="15.0" fill="rgb(217,10,3)" rx="2" ry="2" />
<text  x="21.02" y="495.5" ></text>
</g>
<g >
<title>sct_core::operator+ (3,200 samples, 0.04%)</title><rect x="20.1" y="453" width="0.5" height="15.0" fill="rgb(219,97,38)" rx="2" ry="2" />
<text  x="23.11" y="463.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager::_M_manager (8,544 samples, 0.11%)</title><rect x="81.7" y="485" width="1.2" height="15.0" fill="rgb(243,183,44)" rx="2" ry="2" />
<text  x="84.67" y="495.5" ></text>
</g>
<g >
<title>memcpy (23,328 samples, 0.29%)</title><rect x="71.5" y="469" width="3.5" height="15.0" fill="rgb(209,10,38)" rx="2" ry="2" />
<text  x="74.54" y="479.5" ></text>
</g>
<g >
<title>sct_kernel::ode_system::write_trace (22,240 samples, 0.28%)</title><rect x="78.4" y="485" width="3.3" height="15.0" fill="rgb(234,48,15)" rx="2" ry="2" />
<text  x="81.40" y="495.5" ></text>
</g>
<g >
<title>sct_kernel::synchronization_layer::handle_state_events (511,696 samples, 6.37%)</title><rect x="17.1" y="517" width="75.2" height="15.0" fill="rgb(253,143,35)" rx="2" ry="2" />
<text  x="20.11" y="527.5" >sct_kern..</text>
</g>
<g >
<title>operator delete (12,384 samples, 0.15%)</title><rect x="89.6" y="469" width="1.8" height="15.0" fill="rgb(207,209,40)" rx="2" ry="2" />
<text  x="92.60" y="479.5" ></text>
</g>
<g >
<title>sc_core::sc_spawn_object::semantics (19,798 samples, 0.25%)</title><rect x="10.9" y="165" width="2.9" height="15.0" fill="rgb(254,168,11)" rx="2" ry="2" />
<text  x="13.85" y="175.5" ></text>
</g>
<g >
<title>free (2,080 samples, 0.03%)</title><rect x="27.8" y="469" width="0.3" height="15.0" fill="rgb(209,18,13)" rx="2" ry="2" />
<text  x="30.83" y="479.5" ></text>
</g>
<g >
<title>operator new (12,384 samples, 0.15%)</title><rect x="86.0" y="437" width="1.8" height="15.0" fill="rgb(211,96,16)" rx="2" ry="2" />
<text  x="88.96" y="447.5" ></text>
</g>
<g >
<title>sct_core::ct_module::execute (7,991,008 samples, 99.54%)</title><rect x="15.3" y="565" width="1174.6" height="15.0" fill="rgb(248,183,8)" rx="2" ry="2" />
<text  x="18.33" y="575.5" >sct_core::ct_module::execute</text>
</g>
<g >
<title>sct_kernel::synchronization_layer::parallel_registering_process (19,887 samples, 0.25%)</title><rect x="10.8" y="565" width="3.0" height="15.0" fill="rgb(249,103,22)" rx="2" ry="2" />
<text  x="13.85" y="575.5" ></text>
</g>
<g >
<title>memset (2,048 samples, 0.03%)</title><rect x="91.7" y="453" width="0.3" height="15.0" fill="rgb(243,88,28)" rx="2" ry="2" />
<text  x="94.72" y="463.5" ></text>
</g>
<g >
<title>malloc (4,480 samples, 0.06%)</title><rect x="25.1" y="437" width="0.6" height="15.0" fill="rgb(207,9,25)" rx="2" ry="2" />
<text  x="28.05" y="447.5" ></text>
</g>
<g >
<title>sct_kernel::synchronization_layer::parallel_registering_process (19,861 samples, 0.25%)</title><rect x="10.8" y="469" width="3.0" height="15.0" fill="rgb(231,39,41)" rx="2" ry="2" />
<text  x="13.85" y="479.5" ></text>
</g>
<g >
<title>sc_core::sc_signal::read (960 samples, 0.01%)</title><rect x="27.4" y="405" width="0.1" height="15.0" fill="rgb(205,116,22)" rx="2" ry="2" />
<text  x="30.40" y="415.5" ></text>
</g>
<g >
<title>sct_core::ct_module::ct_module (814 samples, 0.01%)</title><rect x="13.8" y="645" width="0.1" height="15.0" fill="rgb(232,125,44)" rx="2" ry="2" />
<text  x="16.77" y="655.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (218,048 samples, 2.72%)</title><rect x="1092.4" y="421" width="32.0" height="15.0" fill="rgb(236,139,6)" rx="2" ry="2" />
<text  x="1095.38" y="431.5" >st..</text>
</g>
<g >
<title>pow (109,360 samples, 1.36%)</title><rect x="141.2" y="485" width="16.0" height="15.0" fill="rgb(209,204,52)" rx="2" ry="2" />
<text  x="144.17" y="495.5" ></text>
</g>
<g >
<title>sct_kernel::ode_system::restore_trace (9,712 samples, 0.12%)</title><rect x="17.5" y="501" width="1.4" height="15.0" fill="rgb(224,181,19)" rx="2" ry="2" />
<text  x="20.51" y="511.5" ></text>
</g>
<g >
<title>sct_kernel::synchronization_layer::parallel_registering_process (19,833 samples, 0.25%)</title><rect x="10.9" y="341" width="2.9" height="15.0" fill="rgb(224,181,29)" rx="2" ry="2" />
<text  x="13.85" y="351.5" ></text>
</g>
<g >
<title>malloc (3,840 samples, 0.05%)</title><rect x="21.7" y="421" width="0.6" height="15.0" fill="rgb(253,60,0)" rx="2" ry="2" />
<text  x="24.74" y="431.5" ></text>
</g>
<g >
<title>inputs_manager::have_inputs_changed (1,152 samples, 0.01%)</title><rect x="11.4" y="85" width="0.1" height="15.0" fill="rgb(209,218,42)" rx="2" ry="2" />
<text  x="14.36" y="95.5" ></text>
</g>
<g >
<title>boost::numeric::odeint::runge_kutta_dopri5::resize_k_x_tmp_impl (2,080 samples, 0.03%)</title><rect x="23.5" y="453" width="0.3" height="15.0" fill="rgb(237,88,33)" rx="2" ry="2" />
<text  x="26.52" y="463.5" ></text>
</g>
<g >
<title>sc_core::sc_spawn_object::semantics (19,828 samples, 0.25%)</title><rect x="10.9" y="325" width="2.9" height="15.0" fill="rgb(236,158,5)" rx="2" ry="2" />
<text  x="13.85" y="335.5" ></text>
</g>
<g >
<title>std::__future_base::_Result::~_Result (1,248 samples, 0.02%)</title><rect x="13.1" y="69" width="0.2" height="15.0" fill="rgb(205,28,7)" rx="2" ry="2" />
<text  x="16.12" y="79.5" ></text>
</g>
<g >
<title>free (960 samples, 0.01%)</title><rect x="19.5" y="437" width="0.2" height="15.0" fill="rgb(222,198,10)" rx="2" ry="2" />
<text  x="22.55" y="447.5" ></text>
</g>
<g >
<title>sct_kernel::synchronization_layer::parallel_registering_process (19,877 samples, 0.25%)</title><rect x="10.8" y="533" width="3.0" height="15.0" fill="rgb(232,151,4)" rx="2" ry="2" />
<text  x="13.85" y="543.5" ></text>
</g>
<g >
<title>malloc (23,328 samples, 0.29%)</title><rect x="68.1" y="469" width="3.4" height="15.0" fill="rgb(239,50,28)" rx="2" ry="2" />
<text  x="71.11" y="479.5" ></text>
</g>
<g >
<title>CircuitScModule::get_derivatives (4,800 samples, 0.06%)</title><rect x="27.1" y="437" width="0.7" height="15.0" fill="rgb(208,204,41)" rx="2" ry="2" />
<text  x="30.12" y="447.5" ></text>
</g>
<g >
<title>sct_kernel::synchronization_layer::execute (7,990,416 samples, 99.53%)</title><rect x="15.4" y="549" width="1174.5" height="15.0" fill="rgb(243,144,46)" rx="2" ry="2" />
<text  x="18.42" y="559.5" >sct_kernel::synchronization_layer::execute</text>
</g>
<g >
<title>sc_core::sc_spawn_object::semantics (19,804 samples, 0.25%)</title><rect x="10.9" y="197" width="2.9" height="15.0" fill="rgb(216,3,1)" rx="2" ry="2" />
<text  x="13.85" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable::_M_assign (2,160 samples, 0.03%)</title><rect x="12.4" y="53" width="0.4" height="15.0" fill="rgb(209,155,54)" rx="2" ry="2" />
<text  x="15.45" y="63.5" ></text>
</g>
<g >
<title>sct_core::ct_module::add_to_parallel_runnable_processes (1,728 samples, 0.02%)</title><rect x="10.9" y="101" width="0.3" height="15.0" fill="rgb(247,120,31)" rx="2" ry="2" />
<text  x="13.92" y="111.5" ></text>
</g>
<g >
<title>sct_core::my_vector::operator+= (23,328 samples, 0.29%)</title><rect x="75.0" y="469" width="3.4" height="15.0" fill="rgb(206,115,45)" rx="2" ry="2" />
<text  x="77.97" y="479.5" ></text>
</g>
<g >
<title>sct_core::my_vector::my_vector (1,824 samples, 0.02%)</title><rect x="17.2" y="501" width="0.3" height="15.0" fill="rgb(216,17,51)" rx="2" ry="2" />
<text  x="20.25" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base::operator[] (33,024 samples, 0.41%)</title><rect x="84.1" y="453" width="4.9" height="15.0" fill="rgb(226,222,8)" rx="2" ry="2" />
<text  x="87.14" y="463.5" ></text>
</g>
<g >
<title>sct_core::my_vector::my_vector (31,792 samples, 0.40%)</title><rect x="40.0" y="485" width="4.6" height="15.0" fill="rgb(216,70,36)" rx="2" ry="2" />
<text  x="42.97" y="495.5" ></text>
</g>
<g >
<title>sct_core::my_vector::size (1,920 samples, 0.02%)</title><rect x="23.5" y="437" width="0.3" height="15.0" fill="rgb(248,84,27)" rx="2" ry="2" />
<text  x="26.55" y="447.5" ></text>
</g>
<g >
<title>sct_core::ct_module::generate_outputs (6,512 samples, 0.08%)</title><rect x="11.8" y="85" width="1.0" height="15.0" fill="rgb(235,179,43)" rx="2" ry="2" />
<text  x="14.81" y="95.5" ></text>
</g>
<g >
<title>memcpy (1,600 samples, 0.02%)</title><rect x="26.5" y="437" width="0.2" height="15.0" fill="rgb(235,106,34)" rx="2" ry="2" />
<text  x="29.51" y="447.5" ></text>
</g>
<g >
<title>std::call_once::$_1::_FUN (7,992,784 samples, 99.56%)</title><rect x="15.1" y="613" width="1174.8" height="15.0" fill="rgb(252,181,10)" rx="2" ry="2" />
<text  x="18.07" y="623.5" >std::call_once::$_1::_FUN</text>
</g>
<g >
<title>sct_core::operator* (4,800 samples, 0.06%)</title><rect x="19.4" y="453" width="0.7" height="15.0" fill="rgb(254,141,3)" rx="2" ry="2" />
<text  x="22.41" y="463.5" ></text>
</g>
<g >
<title>boost::numeric::odeint::make_adaptive_time_range (8,208 samples, 0.10%)</title><rect x="29.4" y="485" width="1.3" height="15.0" fill="rgb(245,10,19)" rx="2" ry="2" />
<text  x="32.45" y="495.5" ></text>
</g>
<g >
<title>sct_kernel::synchronization_layer::parallel_registering_process (19,809 samples, 0.25%)</title><rect x="10.9" y="213" width="2.9" height="15.0" fill="rgb(253,164,21)" rx="2" ry="2" />
<text  x="13.85" y="223.5" ></text>
</g>
<g >
<title>free (3,136 samples, 0.04%)</title><rect x="17.6" y="485" width="0.4" height="15.0" fill="rgb(213,28,43)" rx="2" ry="2" />
<text  x="20.56" y="495.5" ></text>
</g>
<g >
<title>operator new (327,072 samples, 4.07%)</title><rect x="1044.3" y="421" width="48.1" height="15.0" fill="rgb(248,98,31)" rx="2" ry="2" />
<text  x="1047.31" y="431.5" >oper..</text>
</g>
<g >
<title>sct_kernel::synchronization_layer::locate_state_event_at_start_of_interval (3,456 samples, 0.04%)</title><rect x="1189.0" y="517" width="0.5" height="15.0" fill="rgb(232,139,18)" rx="2" ry="2" />
<text  x="1191.98" y="527.5" ></text>
</g>
<g >
<title>sct_core::operator* (136,080 samples, 1.70%)</title><rect x="44.7" y="485" width="20.0" height="15.0" fill="rgb(244,63,37)" rx="2" ry="2" />
<text  x="47.68" y="495.5" ></text>
</g>
<g >
<title>sc_core::sc_spawn_object::semantics (19,816 samples, 0.25%)</title><rect x="10.9" y="261" width="2.9" height="15.0" fill="rgb(226,62,9)" rx="2" ry="2" />
<text  x="13.85" y="271.5" ></text>
</g>
<g >
<title>malloc (800 samples, 0.01%)</title><rect x="20.2" y="437" width="0.1" height="15.0" fill="rgb(243,173,54)" rx="2" ry="2" />
<text  x="23.23" y="447.5" ></text>
</g>
<g >
<title>boost::numeric::odeint::default_operations::scale_sum6::operator() (19,840 samples, 0.25%)</title><rect x="20.6" y="453" width="2.9" height="15.0" fill="rgb(235,186,28)" rx="2" ry="2" />
<text  x="23.61" y="463.5" ></text>
</g>
<g >
<title>sct_core::operator+ (1,280 samples, 0.02%)</title><rect x="28.9" y="469" width="0.2" height="15.0" fill="rgb(240,89,46)" rx="2" ry="2" />
<text  x="31.88" y="479.5" ></text>
</g>
<g >
<title>sct_kernel::synchronization_layer::parallel_registering_process (19,803 samples, 0.25%)</title><rect x="10.9" y="181" width="2.9" height="15.0" fill="rgb(247,22,27)" rx="2" ry="2" />
<text  x="13.85" y="191.5" ></text>
</g>
<g >
<title>memcpy (2,240 samples, 0.03%)</title><rect x="25.7" y="437" width="0.3" height="15.0" fill="rgb(219,91,16)" rx="2" ry="2" />
<text  x="28.71" y="447.5" ></text>
</g>
<g >
<title>memcpy (800 samples, 0.01%)</title><rect x="20.3" y="437" width="0.2" height="15.0" fill="rgb(225,37,20)" rx="2" ry="2" />
<text  x="23.35" y="447.5" ></text>
</g>
<g >
<title>free (62,864 samples, 0.78%)</title><rect x="30.7" y="485" width="9.2" height="15.0" fill="rgb(211,44,29)" rx="2" ry="2" />
<text  x="33.66" y="495.5" ></text>
</g>
<g >
<title>free (109,968 samples, 1.37%)</title><rect x="222.4" y="469" width="16.2" height="15.0" fill="rgb(239,194,18)" rx="2" ry="2" />
<text  x="225.43" y="479.5" ></text>
</g>
<g >
<title>malloc (219,936 samples, 2.74%)</title><rect x="287.1" y="453" width="32.3" height="15.0" fill="rgb(214,27,28)" rx="2" ry="2" />
<text  x="290.08" y="463.5" >ma..</text>
</g>
<g >
<title>sc_core::sc_spawn_object::semantics (19,898 samples, 0.25%)</title><rect x="10.8" y="613" width="3.0" height="15.0" fill="rgb(225,43,3)" rx="2" ry="2" />
<text  x="13.85" y="623.5" ></text>
</g>
<g >
<title>sct_kernel::synchronization_layer::synchronization_layer (2,335 samples, 0.03%)</title><rect x="14.0" y="629" width="0.3" height="15.0" fill="rgb(225,3,44)" rx="2" ry="2" />
<text  x="16.99" y="639.5" ></text>
</g>
<g >
<title>sct_kernel::synchronization_layer::parallel_registering_process (19,871 samples, 0.25%)</title><rect x="10.8" y="501" width="3.0" height="15.0" fill="rgb(219,56,49)" rx="2" ry="2" />
<text  x="13.85" y="511.5" ></text>
</g>
<g >
<title>sct_core::my_vector::my_vector (13,344 samples, 0.17%)</title><rect x="79.4" y="469" width="1.9" height="15.0" fill="rgb(212,194,48)" rx="2" ry="2" />
<text  x="82.38" y="479.5" ></text>
</g>
<g >
<title>sc_core::sc_spawn_object::semantics (19,844 samples, 0.25%)</title><rect x="10.9" y="389" width="2.9" height="15.0" fill="rgb(247,140,44)" rx="2" ry="2" />
<text  x="13.85" y="399.5" ></text>
</g>
<g >
<title>CircuitScModule::generate_outputs (1,728 samples, 0.02%)</title><rect x="11.9" y="53" width="0.3" height="15.0" fill="rgb(231,224,36)" rx="2" ry="2" />
<text  x="14.94" y="63.5" ></text>
</g>
<g >
<title>sct_core::ct_module::should_generate_outputs (1,184 samples, 0.01%)</title><rect x="12.8" y="85" width="0.1" height="15.0" fill="rgb(224,143,14)" rx="2" ry="2" />
<text  x="15.76" y="95.5" ></text>
</g>
<g >
<title>memcpy (109,664 samples, 1.37%)</title><rect x="190.1" y="469" width="16.1" height="15.0" fill="rgb(234,38,35)" rx="2" ry="2" />
<text  x="193.10" y="479.5" ></text>
</g>
<g >
<title>sct_core::operator+ (6,400 samples, 0.08%)</title><rect x="22.6" y="437" width="0.9" height="15.0" fill="rgb(209,228,29)" rx="2" ry="2" />
<text  x="25.58" y="447.5" ></text>
</g>
<g >
<title>sct_kernel::synchronization_layer::create_synchronization_process (1,603 samples, 0.02%)</title><rect x="14.1" y="613" width="0.2" height="15.0" fill="rgb(221,122,51)" rx="2" ry="2" />
<text  x="17.07" y="623.5" ></text>
</g>
<g >
<title>free (3,840 samples, 0.05%)</title><rect x="23.8" y="453" width="0.6" height="15.0" fill="rgb(213,94,52)" rx="2" ry="2" />
<text  x="26.83" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable::_M_assign_elements (1,536 samples, 0.02%)</title><rect x="1188.5" y="453" width="0.3" height="15.0" fill="rgb(214,76,13)" rx="2" ry="2" />
<text  x="1191.53" y="463.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace::_M_dispose (1,664 samples, 0.02%)</title><rect x="13.1" y="85" width="0.2" height="15.0" fill="rgb(209,176,1)" rx="2" ry="2" />
<text  x="16.06" y="95.5" ></text>
</g>
<g >
<title>sct_kernel::synchronization_layer::handle_reactivation (2,528 samples, 0.03%)</title><rect x="1189.5" y="533" width="0.4" height="15.0" fill="rgb(241,59,14)" rx="2" ry="2" />
<text  x="1192.49" y="543.5" ></text>
</g>
<g >
<title>sc_core::sc_spawn_object::semantics (19,888 samples, 0.25%)</title><rect x="10.8" y="581" width="3.0" height="15.0" fill="rgb(243,172,20)" rx="2" ry="2" />
<text  x="13.85" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base::operator[] (2,304 samples, 0.03%)</title><rect x="1189.1" y="485" width="0.3" height="15.0" fill="rgb(212,60,37)" rx="2" ry="2" />
<text  x="1192.06" y="495.5" ></text>
</g>
<g >
<title>sct_kernel::ode_system::write_trace (1,099,680 samples, 13.70%)</title><rect x="206.3" y="485" width="161.6" height="15.0" fill="rgb(250,71,41)" rx="2" ry="2" />
<text  x="209.27" y="495.5" >sct_kernel::ode_syst..</text>
</g>
<g >
<title>CircuitScModule::is_event (981,216 samples, 12.22%)</title><rect x="980.2" y="453" width="144.2" height="15.0" fill="rgb(219,48,29)" rx="2" ry="2" />
<text  x="983.21" y="463.5" >CircuitScModule::i..</text>
</g>
<g >
<title>memset (109,024 samples, 1.36%)</title><rect x="1124.4" y="453" width="16.1" height="15.0" fill="rgb(239,136,5)" rx="2" ry="2" />
<text  x="1127.43" y="463.5" ></text>
</g>
<g >
<title>sct_kernel::synchronization_layer::locate_state_event (498,944 samples, 6.21%)</title><rect x="19.0" y="501" width="73.3" height="15.0" fill="rgb(208,68,19)" rx="2" ry="2" />
<text  x="21.99" y="511.5" >sct_kern..</text>
</g>
<g >
<title>sct_kernel::synchronization_layer::integrate_equations (7,460,640 samples, 92.93%)</title><rect x="92.4" y="517" width="1096.6" height="15.0" fill="rgb(226,176,7)" rx="2" ry="2" />
<text  x="95.41" y="527.5" >sct_kernel::synchronization_layer::integrate_equations</text>
</g>
<g >
<title>sct_core::my_vector::operator+= (1,600 samples, 0.02%)</title><rect x="23.3" y="421" width="0.2" height="15.0" fill="rgb(238,40,9)" rx="2" ry="2" />
<text  x="26.29" y="431.5" ></text>
</g>
<g >
<title>operator new (109,968 samples, 1.37%)</title><rect x="238.6" y="469" width="16.2" height="15.0" fill="rgb(249,12,44)" rx="2" ry="2" />
<text  x="241.59" y="479.5" ></text>
</g>
<g >
<title>memset (4,128 samples, 0.05%)</title><rect x="85.4" y="437" width="0.6" height="15.0" fill="rgb(244,132,19)" rx="2" ry="2" />
<text  x="88.35" y="447.5" ></text>
</g>
<g >
<title>sc_core::sc_spawn_object::semantics (19,906 samples, 0.25%)</title><rect x="10.8" y="645" width="3.0" height="15.0" fill="rgb(213,150,31)" rx="2" ry="2" />
<text  x="13.85" y="655.5" ></text>
</g>
<g >
<title>std::_Function_handler::_M_invoke (63,936 samples, 0.80%)</title><rect x="82.9" y="485" width="9.4" height="15.0" fill="rgb(211,124,28)" rx="2" ry="2" />
<text  x="85.92" y="495.5" ></text>
</g>
<g >
<title>isspace (1,057 samples, 0.01%)</title><rect x="10.1" y="645" width="0.1" height="15.0" fill="rgb(221,12,32)" rx="2" ry="2" />
<text  x="13.05" y="655.5" ></text>
</g>
<g >
<title>operator new (864 samples, 0.01%)</title><rect x="1189.2" y="469" width="0.1" height="15.0" fill="rgb(233,149,18)" rx="2" ry="2" />
<text  x="1192.19" y="479.5" ></text>
</g>
<g >
<title>malloc (1,920 samples, 0.02%)</title><rect x="19.7" y="437" width="0.3" height="15.0" fill="rgb(223,156,14)" rx="2" ry="2" />
<text  x="22.69" y="447.5" ></text>
</g>
<g >
<title>sct_kernel::numerical_solver::integrate (7,458,816 samples, 92.91%)</title><rect x="92.5" y="501" width="1096.3" height="15.0" fill="rgb(225,31,4)" rx="2" ry="2" />
<text  x="95.45" y="511.5" >sct_kernel::numerical_solver::integrate</text>
</g>
<g >
<title>pthread_once (7,993,376 samples, 99.57%)</title><rect x="15.0" y="629" width="1174.9" height="15.0" fill="rgb(219,165,2)" rx="2" ry="2" />
<text  x="17.99" y="639.5" >pthread_once</text>
</g>
<g >
<title>sct_kernel::synchronization_layer::parallel_registering_process (19,843 samples, 0.25%)</title><rect x="10.9" y="373" width="2.9" height="15.0" fill="rgb(239,50,0)" rx="2" ry="2" />
<text  x="13.85" y="383.5" ></text>
</g>
<g >
<title>inputs_manager::use_checkpoints (657,984 samples, 8.20%)</title><rect x="867.5" y="453" width="96.7" height="15.0" fill="rgb(219,114,47)" rx="2" ry="2" />
<text  x="870.48" y="463.5" >inputs_mana..</text>
</g>
<g >
<title>operator delete (1,152 samples, 0.01%)</title><rect x="15.7" y="517" width="0.2" height="15.0" fill="rgb(216,180,13)" rx="2" ry="2" />
<text  x="18.68" y="527.5" ></text>
</g>
<g >
<title>sct_core::my_vector::my_vector (1,600 samples, 0.02%)</title><rect x="28.3" y="469" width="0.2" height="15.0" fill="rgb(248,109,26)" rx="2" ry="2" />
<text  x="31.30" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler::_M_invoke (960 samples, 0.01%)</title><rect x="29.3" y="469" width="0.1" height="15.0" fill="rgb(252,119,41)" rx="2" ry="2" />
<text  x="32.31" y="479.5" ></text>
</g>
<g >
<title>sct_kernel::synchronization_layer::parallel_registering_process (19,827 samples, 0.25%)</title><rect x="10.9" y="309" width="2.9" height="15.0" fill="rgb(248,119,40)" rx="2" ry="2" />
<text  x="13.85" y="319.5" ></text>
</g>
<g >
<title>sc_core::sc_spawn_object::semantics (19,810 samples, 0.25%)</title><rect x="10.9" y="229" width="2.9" height="15.0" fill="rgb(230,162,46)" rx="2" ry="2" />
<text  x="13.85" y="239.5" ></text>
</g>
<g >
<title>std::thread::_State_impl::_M_run (7,996,873 samples, 99.61%)</title><rect x="14.6" y="661" width="1175.4" height="15.0" fill="rgb(241,106,42)" rx="2" ry="2" />
<text  x="17.61" y="671.5" >std::thread::_State_impl::_M_run</text>
</g>
<g >
<title>operator delete (1,296 samples, 0.02%)</title><rect x="12.3" y="53" width="0.1" height="15.0" fill="rgb(233,90,3)" rx="2" ry="2" />
<text  x="15.26" y="63.5" ></text>
</g>
<g >
<title>sc_core::sc_spawn_object::semantics (19,872 samples, 0.25%)</title><rect x="10.8" y="517" width="3.0" height="15.0" fill="rgb(254,136,26)" rx="2" ry="2" />
<text  x="13.85" y="527.5" ></text>
</g>
<g >
<title>sct_kernel::synchronization_layer::calculate_solutions (7,987,296 samples, 99.49%)</title><rect x="15.5" y="533" width="1174.0" height="15.0" fill="rgb(228,202,9)" rx="2" ry="2" />
<text  x="18.51" y="543.5" >sct_kernel::synchronization_layer::calculate_solutions</text>
</g>
<g >
<title>inputs_manager::use_checkpoints (960 samples, 0.01%)</title><rect x="27.7" y="421" width="0.1" height="15.0" fill="rgb(228,77,39)" rx="2" ry="2" />
<text  x="30.69" y="431.5" ></text>
</g>
<g >
<title>std::_Function_handler::_M_invoke (1,527,872 samples, 19.03%)</title><rect x="964.2" y="469" width="224.6" height="15.0" fill="rgb(230,172,48)" rx="2" ry="2" />
<text  x="967.19" y="479.5" >std::_Function_handler::_M_in..</text>
</g>
<g >
<title>memcmp (2,602 samples, 0.03%)</title><rect x="10.2" y="645" width="0.4" height="15.0" fill="rgb(224,21,0)" rx="2" ry="2" />
<text  x="13.21" y="655.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager::_M_manager (4,256 samples, 0.05%)</title><rect x="30.0" y="469" width="0.7" height="15.0" fill="rgb(254,135,39)" rx="2" ry="2" />
<text  x="33.03" y="479.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace::_M_dispose (704 samples, 0.01%)</title><rect x="14.8" y="613" width="0.1" height="15.0" fill="rgb(250,110,45)" rx="2" ry="2" />
<text  x="17.84" y="623.5" ></text>
</g>
<g >
<title>sct_kernel::parallelization_algorithm::execute_processes (14,799 samples, 0.18%)</title><rect x="11.5" y="101" width="2.2" height="15.0" fill="rgb(240,20,16)" rx="2" ry="2" />
<text  x="14.53" y="111.5" ></text>
</g>
<g >
<title>sct_core::my_vector::operator+= (1,600 samples, 0.02%)</title><rect x="26.7" y="437" width="0.3" height="15.0" fill="rgb(228,156,27)" rx="2" ry="2" />
<text  x="29.74" y="447.5" ></text>
</g>
<g >
<title>sct_core::my_vector::my_vector (659,808 samples, 8.22%)</title><rect x="254.8" y="469" width="96.9" height="15.0" fill="rgb(240,58,43)" rx="2" ry="2" />
<text  x="257.76" y="479.5" >sct_core::m..</text>
</g>
<g >
<title>malloc (12,320 samples, 0.15%)</title><rect x="41.8" y="469" width="1.8" height="15.0" fill="rgb(244,15,36)" rx="2" ry="2" />
<text  x="44.78" y="479.5" ></text>
</g>
<g >
<title>memcpy (1,920 samples, 0.02%)</title><rect x="22.3" y="421" width="0.3" height="15.0" fill="rgb(224,75,32)" rx="2" ry="2" />
<text  x="25.30" y="431.5" ></text>
</g>
<g >
<title>all (8,028,258 samples, 100%)</title><rect x="10.0" y="677" width="1180.0" height="15.0" fill="rgb(238,186,52)" rx="2" ry="2" />
<text  x="13.00" y="687.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_unhook (3,136 samples, 0.04%)</title><rect x="18.5" y="485" width="0.4" height="15.0" fill="rgb(235,131,20)" rx="2" ry="2" />
<text  x="21.48" y="495.5" ></text>
</g>
<g >
<title>sct_core::my_vector::operator+= (800 samples, 0.01%)</title><rect x="20.5" y="437" width="0.1" height="15.0" fill="rgb(208,171,31)" rx="2" ry="2" />
<text  x="23.47" y="447.5" ></text>
</g>
<g >
<title>std::_Function_handler::_M_invoke (5,584,800 samples, 69.56%)</title><rect x="367.9" y="485" width="820.9" height="15.0" fill="rgb(206,134,21)" rx="2" ry="2" />
<text  x="370.90" y="495.5" >std::_Function_handler::_M_invoke</text>
</g>
<g >
<title>sct_kernel::synchronization_layer::parallel_registering_process (19,797 samples, 0.25%)</title><rect x="10.9" y="149" width="2.9" height="15.0" fill="rgb(249,183,5)" rx="2" ry="2" />
<text  x="13.85" y="159.5" ></text>
</g>
<g >
<title>sc_core::sc_signal::read (657,984 samples, 8.20%)</title><rect x="674.1" y="437" width="96.7" height="15.0" fill="rgb(207,217,43)" rx="2" ry="2" />
<text  x="677.05" y="447.5" >sc_core::sc..</text>
</g>
<g >
<title>sct_core::operator+ (93,312 samples, 1.16%)</title><rect x="64.7" y="485" width="13.7" height="15.0" fill="rgb(210,162,44)" rx="2" ry="2" />
<text  x="67.68" y="495.5" ></text>
</g>
<g >
<title>memcpy (960 samples, 0.01%)</title><rect x="20.0" y="437" width="0.1" height="15.0" fill="rgb(228,12,3)" rx="2" ry="2" />
<text  x="22.97" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (109,968 samples, 1.37%)</title><rect x="351.7" y="469" width="16.2" height="15.0" fill="rgb(229,66,5)" rx="2" ry="2" />
<text  x="354.73" y="479.5" ></text>
</g>
<g >
<title>operator new (1,821 samples, 0.02%)</title><rect x="11.5" y="85" width="0.3" height="15.0" fill="rgb(241,130,10)" rx="2" ry="2" />
<text  x="14.54" y="95.5" ></text>
</g>
<g >
<title>malloc (4,448 samples, 0.06%)</title><rect x="80.0" y="453" width="0.7" height="15.0" fill="rgb(222,63,34)" rx="2" ry="2" />
<text  x="83.03" y="463.5" ></text>
</g>
<g >
<title>sct_core::my_vector::size (2,432 samples, 0.03%)</title><rect x="29.5" y="453" width="0.4" height="15.0" fill="rgb(234,149,50)" rx="2" ry="2" />
<text  x="32.54" y="463.5" ></text>
</g>
<g >
<title>sct_core::operator* (2,400 samples, 0.03%)</title><rect x="28.5" y="469" width="0.4" height="15.0" fill="rgb(213,54,17)" rx="2" ry="2" />
<text  x="31.53" y="479.5" ></text>
</g>
<g >
<title>thread_pool::worker_thread2 (7,996,869 samples, 99.61%)</title><rect x="14.6" y="645" width="1175.4" height="15.0" fill="rgb(221,195,27)" rx="2" ry="2" />
<text  x="17.61" y="655.5" >thread_pool::worker_thread2</text>
</g>
<g >
<title>CircuitScModule::is_event (2,592 samples, 0.03%)</title><rect x="1189.0" y="501" width="0.4" height="15.0" fill="rgb(251,80,30)" rx="2" ry="2" />
<text  x="1192.02" y="511.5" ></text>
</g>
<g >
<title>CircuitScModule::is_event (37,152 samples, 0.46%)</title><rect x="83.5" y="469" width="5.5" height="15.0" fill="rgb(221,61,20)" rx="2" ry="2" />
<text  x="86.53" y="479.5" ></text>
</g>
<g >
<title>sc_core::sc_spawn_object::semantics (19,850 samples, 0.25%)</title><rect x="10.8" y="421" width="3.0" height="15.0" fill="rgb(253,214,23)" rx="2" ry="2" />
<text  x="13.85" y="431.5" ></text>
</g>
<g >
<title>sct_core::my_vector::my_vector (333,248 samples, 4.15%)</title><rect x="157.2" y="485" width="49.0" height="15.0" fill="rgb(213,77,43)" rx="2" ry="2" />
<text  x="160.24" y="495.5" >sct_..</text>
</g>
<g >
<title>std::_Hashtable::_M_assign_elements (6,144 samples, 0.08%)</title><rect x="91.4" y="469" width="0.9" height="15.0" fill="rgb(230,139,30)" rx="2" ry="2" />
<text  x="94.42" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable::_M_assign (912 samples, 0.01%)</title><rect x="1188.6" y="437" width="0.2" height="15.0" fill="rgb(242,11,19)" rx="2" ry="2" />
<text  x="1191.62" y="447.5" ></text>
</g>
<g >
<title>sct_kernel::parallelization_algorithm::parallelization_process (19,791 samples, 0.25%)</title><rect x="10.9" y="117" width="2.9" height="15.0" fill="rgb(250,125,28)" rx="2" ry="2" />
<text  x="13.85" y="127.5" ></text>
</g>
<g >
<title>boost::numeric::odeint::runge_kutta_dopri5::do_step_impl (49,280 samples, 0.61%)</title><rect x="20.6" y="469" width="7.2" height="15.0" fill="rgb(236,15,10)" rx="2" ry="2" />
<text  x="23.58" y="479.5" ></text>
</g>
<g >
<title>sct_kernel::ode_system::have_inputs_changed (1,728 samples, 0.02%)</title><rect x="11.3" y="101" width="0.2" height="15.0" fill="rgb(209,215,29)" rx="2" ry="2" />
<text  x="14.28" y="111.5" ></text>
</g>
<g >
<title>operator new (2,224 samples, 0.03%)</title><rect x="79.1" y="469" width="0.3" height="15.0" fill="rgb(225,93,35)" rx="2" ry="2" />
<text  x="82.05" y="479.5" ></text>
</g>
<g >
<title>sct_core::ct_module::end_of_elaboration (3,028 samples, 0.04%)</title><rect x="13.9" y="645" width="0.4" height="15.0" fill="rgb(246,13,23)" rx="2" ry="2" />
<text  x="16.89" y="655.5" ></text>
</g>
<g >
<title>CircuitScModule::get_derivatives (800 samples, 0.01%)</title><rect x="29.3" y="453" width="0.1" height="15.0" fill="rgb(231,19,17)" rx="2" ry="2" />
<text  x="32.33" y="463.5" ></text>
</g>
<g >
<title>boost::numeric::odeint::dense_output_runge_kutta::do_step (70,880 samples, 0.88%)</title><rect x="19.0" y="485" width="10.4" height="15.0" fill="rgb(208,156,27)" rx="2" ry="2" />
<text  x="22.03" y="495.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager::_M_manager (1,280 samples, 0.02%)</title><rect x="29.1" y="469" width="0.2" height="15.0" fill="rgb(209,130,54)" rx="2" ry="2" />
<text  x="32.12" y="479.5" ></text>
</g>
<g >
<title>sc_core::sc_spawn_object::semantics (19,878 samples, 0.25%)</title><rect x="10.8" y="549" width="3.0" height="15.0" fill="rgb(233,101,7)" rx="2" ry="2" />
<text  x="13.85" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable::_M_assign (2,048 samples, 0.03%)</title><rect x="92.0" y="453" width="0.3" height="15.0" fill="rgb(235,62,36)" rx="2" ry="2" />
<text  x="95.02" y="463.5" ></text>
</g>
<g >
<title>malloc (54,432 samples, 0.68%)</title><rect x="52.7" y="469" width="8.0" height="15.0" fill="rgb(245,181,45)" rx="2" ry="2" />
<text  x="55.68" y="479.5" ></text>
</g>
<g >
<title>sc_core::sc_spawn_object::semantics (19,834 samples, 0.25%)</title><rect x="10.9" y="357" width="2.9" height="15.0" fill="rgb(226,187,6)" rx="2" ry="2" />
<text  x="13.85" y="367.5" ></text>
</g>
<g >
<title>sc_main (31,125 samples, 0.39%)</title><rect x="10.0" y="661" width="4.6" height="15.0" fill="rgb(219,50,50)" rx="2" ry="2" />
<text  x="13.02" y="671.5" ></text>
</g>
<g >
<title>sct_kernel::synchronization_layer::parallel_registering_process (19,815 samples, 0.25%)</title><rect x="10.9" y="245" width="2.9" height="15.0" fill="rgb(252,20,5)" rx="2" ry="2" />
<text  x="13.85" y="255.5" ></text>
</g>
<g >
<title>free (221,456 samples, 2.76%)</title><rect x="92.5" y="485" width="32.5" height="15.0" fill="rgb(232,88,51)" rx="2" ry="2" />
<text  x="95.50" y="495.5" >free</text>
</g>
<g >
<title>sct_kernel::synchronization_layer::parallel_registering_process (19,905 samples, 0.25%)</title><rect x="10.8" y="629" width="3.0" height="15.0" fill="rgb(241,67,37)" rx="2" ry="2" />
<text  x="13.85" y="639.5" ></text>
</g>
<g >
<title>std::__detail::_List_node_base::_M_hook (2,224 samples, 0.03%)</title><rect x="81.3" y="469" width="0.4" height="15.0" fill="rgb(242,129,8)" rx="2" ry="2" />
<text  x="84.34" y="479.5" ></text>
</g>
<g >
<title>std::_Function_handler::_M_invoke (5,760 samples, 0.07%)</title><rect x="27.0" y="453" width="0.8" height="15.0" fill="rgb(216,137,20)" rx="2" ry="2" />
<text  x="29.98" y="463.5" ></text>
</g>
<g >
<title>boost::numeric::odeint::default_operations::scale_sum6::operator() (9,920 samples, 0.12%)</title><rect x="19.1" y="469" width="1.5" height="15.0" fill="rgb(236,161,39)" rx="2" ry="2" />
<text  x="22.12" y="479.5" ></text>
</g>
<g >
<title>sc_core::sc_spawn_object::semantics (19,856 samples, 0.25%)</title><rect x="10.8" y="453" width="3.0" height="15.0" fill="rgb(224,227,21)" rx="2" ry="2" />
<text  x="13.85" y="463.5" ></text>
</g>
<g >
<title>inputs_manager::create_checkpoint (896 samples, 0.01%)</title><rect x="1189.6" y="501" width="0.2" height="15.0" fill="rgb(209,91,1)" rx="2" ry="2" />
<text  x="1192.64" y="511.5" ></text>
</g>
<g >
<title>free (2,224 samples, 0.03%)</title><rect x="78.7" y="469" width="0.4" height="15.0" fill="rgb(233,121,26)" rx="2" ry="2" />
<text  x="81.73" y="479.5" ></text>
</g>
<g >
<title>sct_kernel::synchronization_layer::generate_outputs (6,064 samples, 0.08%)</title><rect x="11.9" y="69" width="0.9" height="15.0" fill="rgb(234,19,49)" rx="2" ry="2" />
<text  x="14.87" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Prime_rehash_policy::_M_need_rehash (8,256 samples, 0.10%)</title><rect x="87.8" y="437" width="1.2" height="15.0" fill="rgb(252,133,34)" rx="2" ry="2" />
<text  x="90.78" y="447.5" ></text>
</g>
<g >
<title>memcpy (4,448 samples, 0.06%)</title><rect x="80.7" y="453" width="0.6" height="15.0" fill="rgb(219,47,24)" rx="2" ry="2" />
<text  x="83.69" y="463.5" ></text>
</g>
<g >
<title>malloc (1,600 samples, 0.02%)</title><rect x="22.8" y="421" width="0.3" height="15.0" fill="rgb(206,197,7)" rx="2" ry="2" />
<text  x="25.82" y="431.5" ></text>
</g>
<g >
<title>sct_kernel::ode_system::write_trace (5,920 samples, 0.07%)</title><rect x="16.1" y="517" width="0.8" height="15.0" fill="rgb(225,115,4)" rx="2" ry="2" />
<text  x="19.07" y="527.5" ></text>
</g>
<g >
<title>malloc (1,600 samples, 0.02%)</title><rect x="26.3" y="437" width="0.2" height="15.0" fill="rgb(215,212,35)" rx="2" ry="2" />
<text  x="29.27" y="447.5" ></text>
</g>
<g >
<title>sct_kernel::synchronization_layer::parallel_registering_process (19,855 samples, 0.25%)</title><rect x="10.8" y="437" width="3.0" height="15.0" fill="rgb(206,123,41)" rx="2" ry="2" />
<text  x="13.85" y="447.5" ></text>
</g>
<g >
<title>std::_Function_base::_Base_manager::_M_manager (1,216 samples, 0.02%)</title><rect x="1188.8" y="501" width="0.2" height="15.0" fill="rgb(228,11,21)" rx="2" ry="2" />
<text  x="1191.80" y="511.5" ></text>
</g>
<g >
<title>free (3,520 samples, 0.04%)</title><rect x="20.7" y="437" width="0.5" height="15.0" fill="rgb(249,150,21)" rx="2" ry="2" />
<text  x="23.65" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base::operator[] (960 samples, 0.01%)</title><rect x="27.5" y="405" width="0.2" height="15.0" fill="rgb(246,122,38)" rx="2" ry="2" />
<text  x="30.54" y="415.5" ></text>
</g>
<g >
<title>memcpy (1,600 samples, 0.02%)</title><rect x="23.1" y="421" width="0.2" height="15.0" fill="rgb(209,181,14)" rx="2" ry="2" />
<text  x="26.05" y="431.5" ></text>
</g>
<g >
<title>function_wrapper::impl_type::~impl_type (2,240 samples, 0.03%)</title><rect x="14.6" y="629" width="0.3" height="15.0" fill="rgb(248,11,13)" rx="2" ry="2" />
<text  x="17.61" y="639.5" ></text>
</g>
<g >
<title>sc_core::sc_spawn_object::semantics (19,822 samples, 0.25%)</title><rect x="10.9" y="293" width="2.9" height="15.0" fill="rgb(240,97,2)" rx="2" ry="2" />
<text  x="13.85" y="303.5" ></text>
</g>
<g >
<title>sct_kernel::synchronization_layer::get_tentative_end_time (1,184 samples, 0.01%)</title><rect x="16.9" y="517" width="0.2" height="15.0" fill="rgb(212,59,43)" rx="2" ry="2" />
<text  x="19.94" y="527.5" ></text>
</g>
<g >
<title>memcpy (7,152 samples, 0.09%)</title><rect x="43.6" y="469" width="1.0" height="15.0" fill="rgb(227,139,10)" rx="2" ry="2" />
<text  x="46.59" y="479.5" ></text>
</g>
<g >
<title>malloc (111,792 samples, 1.39%)</title><rect x="173.7" y="469" width="16.4" height="15.0" fill="rgb(241,38,26)" rx="2" ry="2" />
<text  x="176.67" y="479.5" ></text>
</g>
<g >
<title>inputs_manager::operator[] (1,973,952 samples, 24.59%)</title><rect x="577.3" y="453" width="290.2" height="15.0" fill="rgb(250,182,4)" rx="2" ry="2" />
<text  x="580.34" y="463.5" >inputs_manager::operator[]</text>
</g>
<g >
<title>malloc (1,184 samples, 0.01%)</title><rect x="16.5" y="485" width="0.2" height="15.0" fill="rgb(244,89,25)" rx="2" ry="2" />
<text  x="19.50" y="495.5" ></text>
</g>
<g >
<title>malloc (960 samples, 0.01%)</title><rect x="28.7" y="453" width="0.1" height="15.0" fill="rgb(235,196,40)" rx="2" ry="2" />
<text  x="31.67" y="463.5" ></text>
</g>
<g >
<title>sct_core::operator* (9,600 samples, 0.12%)</title><rect x="21.2" y="437" width="1.4" height="15.0" fill="rgb(247,162,19)" rx="2" ry="2" />
<text  x="24.17" y="447.5" ></text>
</g>
<g >
<title>std::_Sp_counted_ptr_inplace::_M_destroy (832 samples, 0.01%)</title><rect x="12.9" y="85" width="0.2" height="15.0" fill="rgb(211,26,17)" rx="2" ry="2" />
<text  x="15.94" y="95.5" ></text>
</g>
<g >
<title>sct_kernel::synchronization_layer::parallel_registering_process (19,897 samples, 0.25%)</title><rect x="10.8" y="597" width="3.0" height="15.0" fill="rgb(205,223,15)" rx="2" ry="2" />
<text  x="13.85" y="607.5" ></text>
</g>
<g >
<title>sc_core::sc_spawn_object::semantics (19,792 samples, 0.25%)</title><rect x="10.9" y="133" width="2.9" height="15.0" fill="rgb(227,194,23)" rx="2" ry="2" />
<text  x="13.85" y="143.5" ></text>
</g>
</g>
</svg>
